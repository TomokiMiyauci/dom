{
  "description": "List of patterns that the test passes",

  "passes": {
    "dom/nodes/DOMImplementation-createHTMLDocument.html": [
      {
        "name": "createHTMLDocument(): document location getter is null",
        "reason": "Document#location getter is not supported"
      },
      {
        "name": "createHTMLDocument(): URL parsing",
        "reason": "HTMLAnchorElement#href getter is not supported"
      }
    ],
    "dom/nodes/Text-constructor.html": [
      {
        "name": "new Text() should get the correct ownerDocument across globals",
        "reason": "Not supported onload event handler attribute"
      },
      {
        "name": "new Text(): prototype chain",
        "reason": "Prototype chain is wrong"
      }
    ],
    "dom/nodes/Comment-constructor.html": [
      {
        "name": "new Comment() should get the correct ownerDocument across globals",
        "reason": "Not supported onload event handler attribute"
      },
      {
        "name": "new Comment(): prototype chain",
        "reason": "Prototype chain is wrong"
      }
    ],
    "dom/nodes/Node-cloneNode.html": [
      {
        "name": "Node with custom prototype",
        "reason": "Prototype chain is wrong"
      }
    ],
    "dom/nodes/Node-appendChild.html": [
      {
        "name": "Appending null to a text node",
        "reason": "compiler error"
      },
      {
        "name": "Appending null to a comment",
        "reason": "compiler error"
      },
      {
        "name": "Appending null to a doctype",
        "reason": "compiler error"
      },
      {
        "name": "Appending a document",
        "reason": "globalThis#frames is not supported"
      },
      {
        "name": "Adopting an orphan",
        "reason": "globalThis#frames is not supported"
      },
      {
        "name": "Adopting a non-orphan",
        "reason": "globalThis#frames is not supported"
      }
    ],
    "dom/nodes/Node-removeChild.html": [
      {
        "name": "Passing a detached element from a frame document to removeChild should not affect it.",
        "reason": "globalThis#frames is not supported"
      },
      {
        "name": "Passing a non-detached element from a frame document to removeChild should not affect it.",
        "reason": "globalThis#frames is not supported"
      },
      {
        "name": "Calling removeChild on a element from a frame document with no children should throw NOT_FOUND_ERR.",
        "reason": "globalThis#frames is not supported"
      },
      {
        "name": "Passing a detached text from a frame document to removeChild should not affect it.",
        "reason": "globalThis#frames is not supported"
      },
      {
        "name": "Passing a non-detached text from a frame document to removeChild should not affect it.",
        "reason": "globalThis#frames is not supported"
      },
      {
        "name": "Calling removeChild on a text from a frame document with no children should throw NOT_FOUND_ERR.",
        "reason": "globalThis#frames is not supported"
      },
      {
        "name": "Passing a detached comment from a frame document to removeChild should not affect it.",
        "reason": "globalThis#frames is not supported"
      },
      {
        "name": "Passing a non-detached comment from a frame document to removeChild should not affect it.",
        "reason": "globalThis#frames is not supported"
      },
      {
        "name": "Calling removeChild on a comment from a frame document with no children should throw NOT_FOUND_ERR.",
        "reason": "globalThis#frames is not supported"
      },
      {
        "name": "Passing a value that is not a Node reference to removeChild should throw TypeError.",
        "reason": "compiler error"
      }
    ],
    "dom/nodes/Node-insertBefore.html": [
      {
        "name": "Calling insertBefore with second argument missing, or other than Node, null, or undefined, must throw TypeError.",
        "reason": "compiler error"
      },
      {
        "name": "Calling insertBefore with a non-Node first argument on a leaf node DocumentType must throw TypeError.",
        "reason": "compiler error"
      },
      {
        "name": "Calling insertBefore with a non-Node first argument on a leaf node Text must throw TypeError.",
        "reason": "compiler error"
      },
      {
        "name": "Calling insertBefore with a non-Node first argument on a leaf node Comment must throw TypeError.",
        "reason": "compiler error"
      },
      {
        "name": "Calling insertBefore with a non-Node first argument on a leaf node ProcessingInstruction must throw TypeError.",
        "reason": "compiler error"
      }
    ],
    "dom/nodes/Node-replaceChild.html": [
      {
        "name": "Passing null to replaceChild should throw a TypeError.",
        "reason": "compiler error"
      }
    ],
    "dom/nodes/Document-getElementById.html": [
      {
        "name": "add id attribute via innerHTML",
        "reason": "innerHTML setter is not supported"
      },
      {
        "name": "remove id attribute via innerHTML",
        "reason": "innerHTML setter is not supported"
      },
      {
        "name": "add id attribute via outerHTML",
        "reason": "outerHTML setter is not supported"
      },
      {
        "name": "remove id attribute via outerHTML",
        "reason": "outerHTML setter is not supported"
      }
    ],
    "dom/nodes/Element-tagName.html": [
      {
        "name": "tagName should be updated when changing ownerDocument",
        "reason": "DOMParser text/xml is not supported"
      }
    ],
    "dom/nodes/Document-constructor.html": [
      {
        "name": "new Document(): metadata",
        "reason": "Document location is not supported"
      },
      {
        "name": "new Document(): URL parsing",
        "reason": "HTMLHyperlinkElementUtils href getter is not supported"
      }
    ],
    "dom/nodes/Node-isConnected.html": [
      { "name": "Test with iframes", "reason": "frames is not supported" }
    ],
    "dom/nodes/CharacterData-appendData.html": [
      {
        "name": "Text.appendData()",
        "reason": "compiler error"
      },
      {
        "name": "Comment.appendData()",
        "reason": "compiler error"
      }
    ],
    "dom/nodes/CharacterData-substringData.html": [
      {
        "name": "Text.substringData() with too few arguments",
        "reason": "compiler error"
      },
      {
        "name": "Comment.substringData() with too few arguments",
        "reason": "compiler error"
      }
    ],
    "dom/collections/HTMLCollection-delete.html": [
      {
        "name": "Loose id",
        "reason": "strict mode only"
      },
      {
        "name": "Loose name",
        "reason": "strict mode only"
      }
    ],
    "dom/collections/HTMLCollection-as-prototype.html": [
      {
        "name": "HTMLCollection as a prototype should not allow getting .length on the base object",
        "reason": "not supported"
      }
    ],
    "dom/collections/HTMLCollection-supported-property-indices.html": [
      {
        "name": "Trying to set an expando that would shadow an already-existing indexed property",
        "reason": "strict mode"
      },
      {
        "name": "Trying to set an expando with an indexed property name past the end of the list",
        "reason": "strict mode"
      },
      {
        "name": "Trying to delete an indexed property name should never work",
        "reason": "strict mode"
      }
    ],
    "dom/collections/HTMLCollection-own-props.html": [
      {
        "name": "Setting non-array index while named property exists (loose)",
        "reason": "strict mode"
      },
      {
        "name": "Setting array index while indexed property exists (loose)",
        "reason": "strict mode"
      },
      {
        "name": "Setting array index while indexed property doesn't exist (loose)",
        "reason": "strict mode"
      }
    ],
    "dom/collections/HTMLCollection-supported-property-names.html": [
      {
        "name": "Trying to set an expando that would shadow an already-existing named property",
        "reason": "strict mode"
      },
      {
        "name": "Trying to set a non-configurable expando that shadows a named property that gets added later",
        "reason": "strict mode"
      }
    ],
    "dom/nodes/Document-getElementsByTagName.html": [
      {
        "name": "Shouldn't be able to set unsigned properties on a HTMLCollection (non-strict mode)",
        "reason": "strict mode"
      }
    ],
    "dom/nodes/Element-getElementsByTagName.html": [
      {
        "name": "Shouldn't be able to set unsigned properties on a HTMLCollection (non-strict mode)",
        "reason": "strict mode"
      }
    ],
    "dom/nodes/Node-properties.html": [
      {
        "name": "document.URL",
        "reason": "location is not supported"
      },
      {
        "name": "document.documentURI",
        "reason": "location is not supported"
      }
    ],
    "dom/nodes/Element-insertAdjacentElement.html": [
      {
        "name": "Adding more than one child to document should cause a HierarchyRequestError exception",
        "reason": "style.visibility setter is not supported"
      }
    ],
    "dom/nodes/Element-insertAdjacentText.html": [
      {
        "name": "Adding more than one child to document should cause a HierarchyRequestError exception",
        "reason": "style.visibility setter is not supported"
      }
    ]
  }
}
