{
  "description": "List of patterns that the test passes",

  "passes": {
    "dom/nodes/DOMImplementation-createHTMLDocument.html": [
      {
        "name": "createHTMLDocument(): document location getter is null",
        "reason": "Document#location getter is not supported"
      },
      {
        "name": "createHTMLDocument(): URL parsing",
        "reason": "HTMLAnchorElement#href getter is not supported"
      },
      {
        "name": "createHTMLDocument test 2: undefined,undefined,\"\"",
        "reason": "DOMString with undefined is not supported"
      }
    ],
    "dom/nodes/Text-constructor.html": [
      {
        "name": "new Text() should get the correct ownerDocument across globals",
        "reason": "Not supported onload event handler attribute"
      },
      {
        "name": "new Text(): prototype chain",
        "reason": "Prototype chain is wrong"
      }
    ],
    "dom/nodes/Comment-constructor.html": [
      {
        "name": "new Comment() should get the correct ownerDocument across globals",
        "reason": "Not supported onload event handler attribute"
      },
      {
        "name": "new Comment(): prototype chain",
        "reason": "Prototype chain is wrong"
      }
    ],
    "dom/nodes/Node-cloneNode.html": [
      {
        "name": "Node with custom prototype",
        "reason": "Prototype chain is wrong"
      }
    ],
    "dom/nodes/Node-appendChild.html": [
      {
        "name": "Appending null to a text node",
        "reason": "compiler error"
      },
      {
        "name": "Appending null to a comment",
        "reason": "compiler error"
      },
      {
        "name": "Appending null to a doctype",
        "reason": "compiler error"
      },
      {
        "name": "Appending a document",
        "reason": "globalThis#frames is not supported"
      },
      {
        "name": "Adopting an orphan",
        "reason": "globalThis#frames is not supported"
      },
      {
        "name": "Adopting a non-orphan",
        "reason": "globalThis#frames is not supported"
      }
    ],
    "dom/nodes/Node-removeChild.html": [
      {
        "name": "Passing a detached element from a frame document to removeChild should not affect it.",
        "reason": "globalThis#frames is not supported"
      },
      {
        "name": "Passing a non-detached element from a frame document to removeChild should not affect it.",
        "reason": "globalThis#frames is not supported"
      },
      {
        "name": "Calling removeChild on a element from a frame document with no children should throw NOT_FOUND_ERR.",
        "reason": "globalThis#frames is not supported"
      },
      {
        "name": "Passing a detached text from a frame document to removeChild should not affect it.",
        "reason": "globalThis#frames is not supported"
      },
      {
        "name": "Passing a non-detached text from a frame document to removeChild should not affect it.",
        "reason": "globalThis#frames is not supported"
      },
      {
        "name": "Calling removeChild on a text from a frame document with no children should throw NOT_FOUND_ERR.",
        "reason": "globalThis#frames is not supported"
      },
      {
        "name": "Passing a detached comment from a frame document to removeChild should not affect it.",
        "reason": "globalThis#frames is not supported"
      },
      {
        "name": "Passing a non-detached comment from a frame document to removeChild should not affect it.",
        "reason": "globalThis#frames is not supported"
      },
      {
        "name": "Calling removeChild on a comment from a frame document with no children should throw NOT_FOUND_ERR.",
        "reason": "globalThis#frames is not supported"
      },
      {
        "name": "Passing a value that is not a Node reference to removeChild should throw TypeError.",
        "reason": "compiler error"
      }
    ],
    "dom/nodes/Node-insertBefore.html": [
      {
        "name": "Calling insertBefore with second argument missing, or other than Node, null, or undefined, must throw TypeError.",
        "reason": "compiler error"
      },
      {
        "name": "Calling insertBefore with a non-Node first argument on a leaf node DocumentType must throw TypeError.",
        "reason": "compiler error"
      },
      {
        "name": "Calling insertBefore with a non-Node first argument on a leaf node Text must throw TypeError.",
        "reason": "compiler error"
      },
      {
        "name": "Calling insertBefore with a non-Node first argument on a leaf node Comment must throw TypeError.",
        "reason": "compiler error"
      },
      {
        "name": "Calling insertBefore with a non-Node first argument on a leaf node ProcessingInstruction must throw TypeError.",
        "reason": "compiler error"
      }
    ],
    "dom/nodes/Node-replaceChild.html": [
      {
        "name": "Passing null to replaceChild should throw a TypeError.",
        "reason": "compiler error"
      }
    ]
  }
}
